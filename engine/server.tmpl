// Code generated by engine.go; DO NOT EDIT.
package generated

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// StartServer starts the HTTP server for the generated functions
func StartServer() {
	{{range .}}http.HandleFunc("{{.Path}}", {{.Name}}Handler)
	{{end}}
	fmt.Println("Server starting on port 8080...")
	if err := http.ListenAndServe(":8080", nil); err != nil {
		fmt.Printf("Server error: %v\n", err)
	}
}

{{range .}}
// {{.Name}}Handler handles HTTP requests for the {{.Name}} function
func {{.Name}}Handler(w http.ResponseWriter, r *http.Request) {
	if r.Method != "{{.Method}}" {
		http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
		return
	}

	var (
		{{range .Params}}{{.Name}} {{.Type}}
		{{end}}
	)

	{{if eq .Method "GET"}}
	// Parse query parameters
	query := r.URL.Query()
	{{range .Params}}
	{{if eq .Type "string"}}
	{{.Name}} = query.Get("{{.Name}}")
	{{else if eq .Type "int"}}
	if {{.Name}}Str := query.Get("{{.Name}}"); {{.Name}}Str != "" {
		{{.Name}}64, err := strconv.ParseInt({{.Name}}Str, 10, 64)
		if err != nil {
			http.Error(w, "Invalid parameter: {{.Name}}", http.StatusBadRequest)
			return
		}
		{{.Name}} = int({{.Name}}64)
	}
	{{end}}
	{{end}}
	{{else}}
	// Parse JSON body
	var requestBody map[string]interface{}
	if err := json.NewDecoder(r.Body).Decode(&requestBody); err != nil {
		http.Error(w, "Failed to parse request body", http.StatusBadRequest)
		return
	}

	{{range .Params}}
	{{if eq .Type "string"}}
	if val, ok := requestBody["{{.Name}}"].(string); ok {
		{{.Name}} = val
	} else {
		http.Error(w, "Invalid parameter: {{.Name}}", http.StatusBadRequest)
		return
	}
	{{else if eq .Type "int"}}
	if val, ok := requestBody["{{.Name}}"].(float64); ok {
		{{.Name}} = int(val)
	} else {
		http.Error(w, "Invalid parameter: {{.Name}}", http.StatusBadRequest)
		return
	}
	{{end}}
	{{end}}
	{{end}}

	// Call the original function
	result := {{.Name}}Body({{range $index, $param := .Params}}{{if $index}}, {{end}}{{.Name}}{{end}})

	// Return the result as JSON
	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(map[string]interface{}{
		"result": result,
	})
}

// Original function implementation - needed for the server to call
func {{.Name}}Body({{range $index, $param := .Params}}{{if $index}}, {{end}}{{.Name}} {{.Type}}{{end}}) {{.ReturnType}} {
	{{if eq .Name "SayHello"}}
	return fmt.Sprintf("Hello, %s!", {{if .Params}}{{(index .Params 0).Name}}{{else}}"World"{{end}})
	{{else if eq .Name "Add"}}
	{{if ge (len .Params) 2}}
	return {{(index .Params 0).Name}} + {{(index .Params 1).Name}}
	{{else}}
	return 0 // Not enough parameters
	{{end}}
	{{else}}
	// Default implementation for unknown functions
	return {{if eq .ReturnType "string"}}""{{else if eq .ReturnType "int"}}0{{else}}nil{{end}}
	{{end}}
}
{{end}}
